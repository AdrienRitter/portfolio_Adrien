declare type AstroUserConfig = Record<string, any>;
interface EventCliSession {
    astroVersion: string;
    cliCommand: string;
}
interface ConfigInfo {
    markdownPlugins: string[];
    adapter: string | null;
    integrations: string[];
    trailingSlash: undefined | 'always' | 'never' | 'ignore';
    build: undefined | {
        format: undefined | 'file' | 'directory';
    };
    markdown: undefined | {
        mode: undefined | 'md' | 'mdx';
        syntaxHighlight: undefined | 'shiki' | 'prism' | false;
    };
}
interface EventCliSessionInternal extends EventCliSession {
    nodeVersion: string;
    viteVersion: string;
    config?: ConfigInfo;
    configKeys?: string[];
    flags?: string[];
}
export declare function eventCliSession(event: EventCliSession, userConfig?: AstroUserConfig, flags?: Record<string, any>): {
    eventName: string;
    payload: EventCliSessionInternal;
}[];
export {};
