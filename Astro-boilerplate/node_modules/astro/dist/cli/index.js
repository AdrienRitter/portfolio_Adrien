import { AstroTelemetry } from "@astrojs/telemetry";
import * as event from "@astrojs/telemetry/events";
import * as colors from "kleur/colors";
import yargs from "yargs-parser";
import { z } from "zod";
import add from "../core/add/index.js";
import build from "../core/build/index.js";
import { openConfig } from "../core/config.js";
import devServer from "../core/dev/index.js";
import { enableVerboseLogging, nodeLogDestination } from "../core/logger/node.js";
import { formatConfigErrorMessage, formatErrorMessage, printHelp } from "../core/messages.js";
import preview from "../core/preview/index.js";
import { createSafeError } from "../core/util.js";
import { check } from "./check.js";
import { openInBrowser } from "./open.js";
import * as telemetryHandler from "./telemetry.js";
function printAstroHelp() {
  printHelp({
    commandName: "astro",
    headline: "Futuristic web development tool.",
    commands: [
      ["add", "Add an integration to your configuration."],
      ["docs", "Launch Astro's Doc site directly from the terminal. "],
      ["dev", "Run Astro in development mode."],
      ["build", "Build a pre-compiled production-ready site."],
      ["preview", "Preview your build locally before deploying."],
      ["check", "Check your project for errors."],
      ["telemetry", "Enable/disable anonymous data collection."],
      ["--version", "Show the version number and exit."],
      ["--help", "Show this help message."]
    ],
    flags: [
      ["--host [optional IP]", "Expose server on network"],
      ["--config <path>", "Specify the path to the Astro config file."],
      ["--root <path>", "Specify the path to the project root folder."],
      ["--drafts", "Include markdown draft pages in the build."],
      ["--verbose", "Enable verbose logging"],
      ["--silent", "Disable logging"]
    ]
  });
}
async function printVersion() {
  const version = "1.0.0-beta.44";
  console.log();
  console.log(`  ${colors.bgGreen(colors.black(` astro `))} ${colors.green(`v${version}`)}`);
}
function resolveCommand(flags) {
  const cmd = flags._[2];
  if (cmd === "add")
    return "add";
  if (cmd === "telemetry")
    return "telemetry";
  if (flags.version)
    return "version";
  else if (flags.help)
    return "help";
  const supportedCommands = /* @__PURE__ */ new Set(["dev", "build", "preview", "check", "docs"]);
  if (supportedCommands.has(cmd)) {
    return cmd;
  }
  return "help";
}
async function cli(args) {
  var _a;
  const flags = yargs(args);
  const cmd = resolveCommand(flags);
  const root = flags.root;
  switch (cmd) {
    case "help":
      printAstroHelp();
      return process.exit(0);
    case "version":
      await printVersion();
      return process.exit(0);
  }
  let logging = {
    dest: nodeLogDestination,
    level: "info"
  };
  if (flags.verbose) {
    logging.level = "debug";
    enableVerboseLogging();
  } else if (flags.silent) {
    logging.level = "silent";
  }
  const telemetry = new AstroTelemetry({ version: "1.0.0-beta.44" });
  if (cmd === "telemetry") {
    try {
      const subcommand = (_a = flags._[3]) == null ? void 0 : _a.toString();
      return await telemetryHandler.update(subcommand, { flags, telemetry });
    } catch (err) {
      return throwAndExit(err);
    }
  }
  switch (cmd) {
    case "add": {
      try {
        const packages = flags._.slice(3);
        telemetry.record(event.eventCliSession({
          astroVersion: "1.0.0-beta.44",
          cliCommand: "add"
        }));
        return await add(packages, { cwd: root, flags, logging, telemetry });
      } catch (err) {
        return throwAndExit(err);
      }
    }
    case "dev": {
      try {
        const { astroConfig, userConfig } = await openConfig({ cwd: root, flags, cmd });
        telemetry.record(event.eventCliSession({ astroVersion: "1.0.0-beta.44", cliCommand: "dev" }, userConfig, flags));
        await devServer(astroConfig, { logging, telemetry });
        return await new Promise(() => {
        });
      } catch (err) {
        return throwAndExit(err);
      }
    }
    case "build": {
      try {
        const { astroConfig, userConfig } = await openConfig({ cwd: root, flags, cmd });
        telemetry.record(event.eventCliSession({ astroVersion: "1.0.0-beta.44", cliCommand: "build" }, userConfig, flags));
        return await build(astroConfig, { logging, telemetry });
      } catch (err) {
        return throwAndExit(err);
      }
    }
    case "check": {
      const { astroConfig, userConfig } = await openConfig({ cwd: root, flags, cmd });
      telemetry.record(event.eventCliSession({ astroVersion: "1.0.0-beta.44", cliCommand: "check" }, userConfig, flags));
      const ret = await check(astroConfig);
      return process.exit(ret);
    }
    case "preview": {
      try {
        const { astroConfig, userConfig } = await openConfig({ cwd: root, flags, cmd });
        telemetry.record(event.eventCliSession({ astroVersion: "1.0.0-beta.44", cliCommand: "preview" }, userConfig, flags));
        const server = await preview(astroConfig, { logging, telemetry });
        return await server.closed();
      } catch (err) {
        return throwAndExit(err);
      }
    }
    case "docs": {
      try {
        await telemetry.record(event.eventCliSession({
          astroVersion: "1.0.0-beta.44",
          cliCommand: "docs"
        }));
        return await openInBrowser("https://docs.astro.build/");
      } catch (err) {
        return throwAndExit(err);
      }
    }
    default: {
      throw new Error(`Error running ${cmd}`);
    }
  }
}
function throwAndExit(err) {
  if (err instanceof z.ZodError) {
    console.error(formatConfigErrorMessage(err));
  } else {
    console.error(formatErrorMessage(createSafeError(err)));
  }
  process.exit(1);
}
export {
  cli
};
