var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { warn } from "./logger/core.js";
function createRequest({
  url,
  headers,
  method = "GET",
  body = void 0,
  logging,
  ssr
}) {
  let headersObj = headers instanceof Headers ? headers : new Headers(Object.entries(headers));
  const request = new Request(url.toString(), {
    method,
    headers: headersObj,
    body
  });
  Object.defineProperties(request, {
    canonicalURL: {
      get() {
        warn(logging, "deprecation", `Astro.request.canonicalURL has been moved to Astro.canonicalURL`);
        return void 0;
      }
    },
    params: {
      get() {
        warn(logging, "deprecation", `Astro.request.params has been moved to Astro.params`);
        return void 0;
      }
    }
  });
  if (!ssr) {
    const _headers = request.headers;
    const headersDesc = Object.getOwnPropertyDescriptor(request, "headers") || {};
    Object.defineProperty(request, "headers", __spreadProps(__spreadValues({}, headersDesc), {
      get() {
        warn(logging, "ssg", `Headers are not exposed in static-site generation (SSG) mode. To enable reading headers you need to set an SSR adapter in your config.`);
        return _headers;
      }
    }));
  }
  return request;
}
export {
  createRequest
};
