import { viteID } from "../util.js";
import { getPageDataByViteID } from "./internal.js";
function virtualHoistedEntry(id) {
  return id.startsWith("/astro/hoisted.js?q=");
}
function vitePluginHoistedScripts(astroConfig, internals) {
  return {
    name: "@astro/rollup-plugin-astro-hoisted-scripts",
    resolveId(id) {
      if (virtualHoistedEntry(id)) {
        return id;
      }
    },
    load(id) {
      if (virtualHoistedEntry(id)) {
        let code = "";
        for (let path of internals.hoistedScriptIdToHoistedMap.get(id)) {
          let importPath = path;
          if (importPath.startsWith("/@fs")) {
            importPath = importPath.slice("/@fs".length);
          }
          code += `import "${importPath}";`;
        }
        return {
          code
        };
      }
      return void 0;
    },
    async generateBundle(_options, bundle) {
      for (const [id, output] of Object.entries(bundle)) {
        if (output.type === "chunk" && output.facadeModuleId && virtualHoistedEntry(output.facadeModuleId)) {
          const facadeId = output.facadeModuleId;
          const pages = internals.hoistedScriptIdToPagesMap.get(facadeId);
          for (const pathname of pages) {
            const vid = viteID(new URL("." + pathname, astroConfig.root));
            const pageInfo = getPageDataByViteID(internals, vid);
            if (pageInfo) {
              pageInfo.hoistedScript = id;
            }
          }
        }
      }
    }
  };
}
export {
  vitePluginHoistedScripts
};
